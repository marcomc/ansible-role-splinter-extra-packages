---
- name: Install global Composer packages.
  composer:
    command: "{{ (item.state | default('present') == 'absent') | ternary('remove', 'require') }}"
    arguments: "{{ item.name | default(item) }} {{ item.version | default('@stable') }}"
    # Ansible 2.4 supports `global_command` making `working_dir` optional.
    working_dir: "{{ lookup('env', 'COMPOSER_HOME') | default('~/.composer', true) }}"
  with_items: "{{ composer_packages }}"

- name: Read NPM packages list from JSON file
  set_fact:
    npm_desired_global_packages: "{{ lookup('file', npm_global_packages_list_file) | from_json }}"
  when:
    - npm_global_packages_list_file is defined
    - npm_global_packages_list_file != ''
  ignore_errors: yes
  delegate_to: localhost

- name: Update the list of Desired NPM global packages
  set_fact:
    npm_packages: "{{ npm_packages|default([]) + [{ 'name': item.key, 'state': 'present', 'version': item.value.version }] }}"
  with_dict: "{{ npm_desired_global_packages.dependencies }}"
  when: npm_desired_global_packages is defined

- name: Install global NPM packages.
  npm:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    global: yes
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ npm_packages }}"

- name: Read Pip packages list from file
  read_csv:
    path: "{{ pip_packages_list_file }}"
    fieldnames: name,version
    delimiter: ','
  register: pip_desired_packages
  when:
    - pip_packages_list_file is defined
    - pip_packages_list_file != ''
  ignore_errors: yes
  delegate_to: localhost

- name: Update the list of Desired Pip packages
  set_fact:
    pip_packages: "{{ pip_packages|default([]) + [{ 'name': item.name, 'state': 'present', 'version': item.version }] }}"
  with_items: "{{ pip_desired_packages.list }}"
  when: pip_desired_packages is defined

- name: Install global Pip packages.
  pip:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ pip_packages }}"

- name: Install global Ruby gems.
  gem:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    user_install: no
    executable: "{{ item.executable | default(omit) }}"
  with_items: "{{ gem_packages }}"
